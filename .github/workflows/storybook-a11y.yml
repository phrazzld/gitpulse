name: Storybook Accessibility

on:
  push:
    branches: [master, main]
    paths:
      - 'src/**/*.stories.tsx'
      - 'src/**/*.stories.jsx'
      - 'src/**/*.stories.ts'
      - 'src/**/*.stories.js'
      - '.storybook/**/*'
  pull_request:
    branches: [master, main]
    paths:
      - 'src/**/*.stories.tsx'
      - 'src/**/*.stories.jsx'
      - 'src/**/*.stories.ts'
      - 'src/**/*.stories.js'
      - '.storybook/**/*'

# Set required permissions
permissions:
  contents: read
  pull-requests: write
  checks: write

jobs:
  storybook-a11y:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build Storybook
      run: npm run build-storybook
    
    - name: Install accessibility testing dependencies
      run: npm install axe-playwright @axe-core/playwright @storybook/test-runner --save-dev
      
    - name: Install Playwright browsers
      run: npx playwright install chromium --with-deps
      
    - name: Prepare test environment
      run: |
        # Create a test log directory for detailed reports
        mkdir -p test-logs
        
        # Verify setup file exists and is readable
        ls -la .storybook/test-runner-setup.js
        ls -la .storybook/utils/custom-a11y-test-utils.js
        
    - name: Verify required accessibility test files
      run: |
        echo "Checking for required test files..."
        ls -la .storybook/test-runner-setup.js
        ls -la .storybook/utils/custom-a11y-test-utils.js
        ls -la .storybook/utils/custom-axe-reporter.js
        
    - name: Create Storybook test config
      run: |
        # Create test-storybook.config.js at the root to configure test-storybook
        # This file points to our custom setup file that handles a11y testing
        cat > test-storybook.config.js << 'EOF'
        module.exports = {
          setupFile: './.storybook/test-runner-setup.js',
          browserBuilder: async (browserType) => {
            const browser = await browserType.launch({
              // Set browser options for CI environment
              headless: true,
              args: ['--no-sandbox', '--disable-setuid-sandbox', '--disable-dev-shm-usage']
            });
            return browser;
          },
          // Set a longer timeout for a11y testing
          testTimeout: 30000,
        };
        EOF
        
        # Display the created config files for debugging
        echo "Created test-storybook.config.js:"
        cat test-storybook.config.js
        
    - name: Start Storybook server and run tests
      run: |
        # Create directory for logs
        mkdir -p test-logs

        # Run with enhanced output for better visualization in GitHub Actions logs
        echo "::group::Starting Storybook server and running accessibility tests"
        
        # Run the test with concurrently
        npx concurrently -k -s first -n "SB,TEST" \
          "npx http-server storybook-static --port 6006 --silent" \
          "npx wait-on tcp:6006 && npx test-storybook --url http://localhost:6006 --ci --junit --maxWorkers=2" | tee test-logs/a11y-raw-output.log
        
        # Capture exit code
        A11Y_EXIT_CODE=${PIPESTATUS[0]}
        echo "::endgroup::"
        
        # Check if there were violations and provide a formatted summary
        if [ $A11Y_EXIT_CODE -ne 0 ]; then
          echo "::group::⚠️ Accessibility Violations Found"
          echo ""
          
          # Extract and display violation summary in a more readable format
          cat test-logs/a11y-raw-output.log | grep -A 2 "========== ACCESSIBILITY VIOLATIONS SUMMARY ==========" | grep -v "======" || true
          
          echo ""
          echo "For detailed information:"
          echo "1. See the generated a11y-summary.md file in the artifacts"
          echo "2. Check 'Rule-based Violation Summary' in the logs below"
          echo "3. Run locally with: npm run check:a11y:all"
          echo ""
          echo "::endgroup::"
          
          # Display rule-based summary for quick analysis
          echo "::group::Rule-based Violation Summary"
          cat test-logs/a11y-raw-output.log | grep -A 20 "Rule-based Violation Summary:" | grep -v "Detailed Violations" || true
          echo "::endgroup::"
        else
          echo "::group::✅ All accessibility tests passed!"
          echo "No accessibility violations found"
          echo "::endgroup::"
        fi
        
        # Exit with original status code
        exit $A11Y_EXIT_CODE
      env:
        # Ensure tests know they're running in CI
        CI: true
        # Force the tests to use our custom handlers
        SKIP_A11Y_FAILURES: false
        # Verbose logging for easier debugging
        DEBUG: "true"
        # Enhanced axe reporting for better violation details
        A11Y_ENHANCED_REPORTING: "true"
        # Output location for test reports
        TEST_REPORT_PATH: "test-logs/storybook-a11y.xml"
        # Add paths to environment
        NODE_PATH: "./node_modules"
        
    - name: Upload test reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: storybook-a11y-reports
        path: test-logs/
        retention-days: 7